import net.darkhax.curseforgegradle.TaskPublishCurseForge

buildscript {
    repositories {
        // These repositories are only for Gradle plugins, put any other repositories in the repository block further below
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        mavenCentral()
    }
    dependencies {
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}

plugins {
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'

    id 'idea'

    id 'maven-publish'
    id "com.modrinth.minotaur" version "2.+"
    id 'net.darkhax.curseforgegradle' version '1.1.16'
}

apply plugin: 'org.spongepowered.mixin'

group = mod_group_id
version = "${minecraft_version}-${mod_version}"

base {
    archivesName = mod_id
}

java {
    toolchain.languageVersion = JavaLanguageVersion.of(17)
}

minecraft {
    mappings channel: mapping_channel, version: "${parchment_version}-${minecraft_version}"

    enableIdeaPrepareRuns = true
    copyIdeResources = true

    // See https://docs.minecraftforge.net/en/latest/advanced/accesstransformers/ for more information.
    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        // applies to all the run configs below
        configureEach {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        client {
            property 'forge.enabledGameTestNamespaces', mod_id
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"
        }

        server {
            property 'forge.enabledGameTestNamespaces', mod_id
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"
            args '--nogui'
        }

        gameTestServer {
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        data {
            // example of overriding the workingDirectory set in configureEach above
            workingDirectory project.file('run-data')

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

mixin {
    add sourceSets.main, "${mod_id}.refmap.json"

    config "${mod_id}.mixins.json"
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

/* -------------------------------------------- */
/*  Dependencies                                */
/* -------------------------------------------- */

repositories {
    maven {
        // Dat Modding API
        name = "Dat Developer"
        url = "https://maven.datdeveloper.com/releases"
    }

    maven {
        // JEI
        name = "Jared's maven"
        url = "https://maven.blamejared.com/"
    }

    maven {
        // Create
        name = 'tterrag maven'
        url = 'https://maven.tterrag.com/'
    }

    maven {
        // CC Tweaked
        url "https://squiddev.cc/maven/"
        content {
            includeGroup("cc.tweaked")
            includeModule("org.squiddev", "Cobalt")
        }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    // JEI
    compileOnly(fg.deobf("mezz.jei:jei-${minecraft_version}-common-api:${jei_version}"))
    compileOnly(fg.deobf("mezz.jei:jei-${minecraft_version}-forge-api:${jei_version}"))
    runtimeOnly(fg.deobf("mezz.jei:jei-${minecraft_version}-forge:${jei_version}"))

    // CC: Tweaked
    compileOnly("cc.tweaked:cc-tweaked-$minecraft_version-core-api:$cctVersion")
    compileOnly(fg.deobf("cc.tweaked:cc-tweaked-$minecraft_version-forge-api:$cctVersion"))
    runtimeOnly(fg.deobf("cc.tweaked:cc-tweaked-$minecraft_version-forge:$cctVersion"))

    // Create
    implementation fg.deobf("com.simibubi.create:create-${minecraft_version}:${create_version}:slim") { transitive = false }
    implementation fg.deobf("com.jozufozu.flywheel:flywheel-forge-${flywheel_minecraft_version}:${flywheel_version}")
    implementation fg.deobf("com.tterrag.registrate:Registrate:${registrate_version}")

    implementation fg.deobf("com.datdeveloper:datmoddingapi:${datmoddingapi_version}")

    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
}

/* -------------------------------------------- */
/*  Tasks                                       */
/* -------------------------------------------- */

tasks.named('processResources', ProcessResources).configure {
    var replaceProperties = [
            minecraft_version: minecraft_version, minecraft_version_range: minecraft_version_range,
            forge_version: forge_version, forge_version_range: forge_version_range,
            loader_version_range: loader_version_range,
            mod_id: mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors: mod_authors, mod_description: mod_description,
    ]

    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

tasks.named('jar', Jar).configure {
    manifest {
        attributes([
                "Specification-Title": mod_id,
                "Specification-Vendor": mod_authors,
                "Specification-Version": "1", // We are version 1 of ourselves
                "Implementation-Title": project.name,
                "Implementation-Version": project.jar.archiveVersion,
                "Implementation-Vendor": mod_authors,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }

    // This is the preferred method to reobfuscate your jar file
    finalizedBy 'reobfJar'
}

tasks.register('printVersion') {
    doLast {
        println version
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

/* -------------------------------------------- */
/*  Publishing                                  */
/* -------------------------------------------- */

// Maven Publishing
publishing {
    publications {
        maven(MavenPublication) {
            groupId = project.group
            artifactId = project.name
            version = project.version

            from components.java

            pom {
                name = project.name
                description = mod_description
                url = 'https://datdeveloper.com/create-war'
                licenses {
                    license {
                        name = 'MIT License'
                        url = 'https://github.com/Dat-Developer-Mods/create-war/blob/master/LICENSE'
                    }
                }
                developers {
                    developer {
                        id = 'jtljac'
                        name = 'Jacob Lucas'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com.com/dat-developer-mods/create-war.git'
                    developerConnection = 'scm:git:ssh://github.com/dat-developer-mods/create-war.git'
                    url = 'https://datdeveloper.com/create-war/'
                }

                withXml {
                    asNode().dependencies.dependency.each { dep ->
                        if(dep.artifactId.last().value().last() == "forge") {
                            assert dep.parent().remove(dep)
                        }
                    }
                }
            }
        }
    }
    repositories {
        maven {
            name = "Dat-Maven-Repo"
            url = "https://maven.datdeveloper.com/releases"
            credentials {
                username = System.getenv("MAVENREPOUSER")
                password = System.getenv("MAVENREPOPASS")
            }
        }
    }
}

// Curse Publishing
tasks.register('publishCurseForge', TaskPublishCurseForge) {
    dependsOn(tasks.jar)
    group = "publishing"

    apiToken=System.getenv("CURSEFORGE_TOKEN")
    def mainFile=upload(curse_id, jar)
    mainFile.releaseType='release'
    mainFile.changelog=System.getenv("CHANGELOG")
    mainFile.changelogType='markdown'
    mainFile.displayName="${mod_name} - ${version}"
    mainFile.addModLoader("Forge")
    mainFile.addGameVersion(minecraft_version)
    mainFile.addJavaVersion("Java 17")
}

// Modrinth Publishing
modrinth {
    debugMode=true
    token=System.getenv("MODRINTH_TOKEN")
    projectId=modrinth_id
    versionName="${mod_name} - ${version}"
    uploadFile=jar
    gameVersions=[minecraft_version]
    changelog=System.getenv("CHANGELOG")
}

// Dependencies
tasks.modrinth.configure {
    dependsOn(tasks.jar)
}

publish.configure {
    dependsOn(tasks.modrinth, tasks.publishCurseForge)
}

tasks.withType(GenerateModuleMetadata).configureEach {
    enabled = false
}
